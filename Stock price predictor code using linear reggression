import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score



if 'synthetic_data' in locals():
    synthetic_data.to_csv('synthetic_stock_data.csv', index=False)

    df = pd.read_csv('synthetic_stock_data.csv')
    display(df.head())
    display(df.info())

    try:
        df = pd.read_csv('synthetic_stock_data.csv')

        print("Missing values before handling:")
        display(df.isnull().sum())

        df.dropna(inplace=True)
        print("\nMissing values after handling:")
        display(df.isnull().sum())

        df['Date'] = pd.to_datetime(df['Date'])
        df.set_index('Date', inplace=True)

        df['MA_7'] = df['Close'].rolling(window=7).mean()
        df['MA_30'] = df['Close'].rolling(window=30).mean()
        df['Daily_Change'] = df['Close'] - df['Open']

        df.dropna(inplace=True)

        features = ['Open', 'High', 'Low', 'Volume', 'MA_7', 'MA_30', 'Daily_Change']
        target = 'Close'

        X = df[features]
        y = df[target]

        scaler = MinMaxScaler()
        X_scaled = scaler.fit_transform(X)

        print("\nData after feature engineering and handling NaNs:")
        display(df.head())
        print("\nScaled features (first 5 rows):")
        display(pd.DataFrame(X_scaled, columns=features).head())

    except FileNotFoundError:
        print("Error: synthetic_stock_data.csv not found. Please make sure the file is in the correct directory.")
        df = None
    except Exception as e:
        print(f"An error occurred: {e}")
        df = None

    if df is not None:
        model = LinearRegression()

        X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

        model.fit(X_train, y_train)

        print("Linear regression model training complete.")
    else:
        print("DataFrame is not loaded. Cannot train the model.")

    if 'model' in locals() and 'X_test' in locals() and 'y_test' in locals():
        y_pred = model.predict(X_test)

        mse = mean_squared_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)

        print(f"Mean Squared Error (MSE): {mse}")
        print(f"R-squared (R2) Score: {r2}")
    else:
        print("Model or test data not found. Cannot perform evaluation.")
else:
    print("Synthetic data not found. Please run the previous cell to generate the data.")
